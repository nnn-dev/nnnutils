.TH ADMIN.SH 1 LOCAL

.SH NAME
admin.sh - gestion du lancement et de l'arret de modules

.SH SYNOPSIS
admin.sh 
.I [options]
.B -l

admin.sh
.I [options] <module>
.B start|stop|status

admin.sh
.I [options] <module>
.B restart|force-reload

admin.sh
.I [options] <module>
.B try-restart

.SH DESCRIPTION
.B admin.sh
est l'équivalent des
.I scripts d'initialisation  LSB (Linux Standard Base) mais a un niveau applicatif. 
Il peut gérer un ensemble de modules en lançant, arrêtant ou en affichant l'état des modules.

Avec ce script vous pouvez gérer facilement une application qui utilise de multiples modules.

.SH OPTIONS
.TP 2
-M <répertoire>
indique l'emplacement des fichiers de modules (voir MODULES).
défaut : admin-modules

.TP
-E <fichier>
indique l'emplacement du fichier d'environnement (voir MODULES).
défaut :
.I aucun

.TP
-l
: affiche la liste des modules.

.TP
-A nosys
l'action est effectuée pour tous les modules qui n'ont pas le préfixe 
.B sys.
A utiliser à la place de <module>.

.TP
-A allsys
l'action est effectuée sur tous les modules.
A utiliser à la place de <module>.

.TP
-v
affiche la version du programme
.B admin.sh.

.TP
-?
affiche le message d'aide.

.SH COMMANDES
.TP 2
start
: démarre un module.

.TP
stop
: arrête un module.

.TP
status
: affiche l'état d'un module.

.TP
restart
: arrête le module (si démarré) puis redémarre le module.
.I force-reload est pour correspondre avec la norme LSB.

.TP
try-restart
: redémarre le module (si démarré)

.SH MODULES
Un module correspond à un fichier qui décrit comment démarrer, arrêter ou connaître l'état d'un composant.
C'est un fichier script avec un format particulier (voir ci-dessous.)
Ce fichier contient des fonctions shell et une description.
Un fichier d'environnement peut être utilisé pour conserver des paramètres ou des fonctions globales. 

.SS Fichier d'environnement
C'est un script optionnel lancé dans le shell courant (avec la commande 
.B . (point) 
). Ce fichier doit être indiqué avec l'option 
.B -E 
 .

.SS Nom du fichier
Le fichier module doit présent dans un répertoire (par défaut 
.I admin-modules
) en suivant un de ces formats :
.I <nombre>_<nom>
ou
.I <nombre>_sys_<nom>
où 
.TP 2
<nombre>
est un nombre. Il indique l'ordre de lancement du module quand l'option 
.B -A 
est utilisée. Lors de l'arrêt l'ordre est inversé.
.TP
<nom>
est le nom que vous voulez.
.TP
sys
est utilisé pour indiquer un module système.

.SS Modules Systèmes
Un module système représente un composant utilisé globalement sur la machine, comme un 
.I serveur ldap
ou un 
.I serveur dns 
c'est à dire quand l'arrêt du composant a un impact sur l'ensemble de la machine et des autres applications.

.SS Format du fichier
Le fichier doit contenir la description du module (commentaires avec NNNA) et 3 fonctions shells :
.TP 1
fn_status
.TP
fn_start
.TP
fn_stop



Ci-dessous, un modèle pour les fichiers :

 #!/bin/sh

 # ################################################# #
 # NNNA description décrire ici le composant         #
 # NNNA author      vous                             #
 # NNNA version     version de ce script             #
 # ################################################# #

 fn_status()
 {
  #récupere l'état du composant (comme dans System V)
  status=0 #0 le composant est démarré
  status=1 #1 le composant est mort mais le fichier PID existe
  status=2 #2 le composant est mort mais le fichier verrou existe
  status=3 #3 le composant est arrêté
  return $status
 }

 fn_start()
 {
  #démarre le composant
  return 0 #le composant est démarré
  #autre code de sortie = erreur
 }

 fn_stop()
 {
  #arrête le composant
  return 0 #le composant est arrêté
  #autre code de sortie = erreur
 }


.SH EXEMPLE
Par exemple, si votre application se compose d'un site web et d'une base de données, vous pouvez créer deux modules :
.TP 2
un pour le site web,
.TP
un autre pour la base de données.



.SS Site web
Supposons que le site web soit hébergé dans un
.I virtualhost 
sur un Apache mutualisé. 
L'Apache est donc un composant système.
Nous allons créer le fichier 
.B admin-modules/20_sys_apache.
Ci-dessous son contenu:
 #!/bin/sh

 # ################################################# #
 # NNNA description Serveur web apache               #
 # NNNA author      Auteur de l'exemple              #
 # NNNA version     version 1.0                      #
 # ################################################# #

 fn_status()
 {
  service apache2 status
  return $?
 }

 fn_start()
 {
  service apache2 start
  return $?
 }

 fn_stop()
 {
  service apache2 stop
  return $?
 }

.SS Base de données
L'instance de la base de données est lancée en mode autonome mais doit être lancée avant l'Apache.
Nous allons créer le fichier 
.B admin-modules/10_database.
Ci-dessous son contenu
 #!/bin/sh

 # ################################################# #
 # NNNA description Base de données du site web      #
 # NNNA author      Auteur de l'exemple              #
 # NNNA version     version 1.0                      #
 # ################################################# #
 
 PG_CTL=/usr/lib/postgresql/9.1/bin/pg_ctl
 
 fn_status()
 {
  su - postgres -c "$PG_CTL status -D /var/nnnadminexample/mydatabase"
  case $? in  #transform the pg_ctl exit status on system V
  '0') return 0;;
  '1') return 3;;
  *) return 4;;
  esac
 }
 
 fn_start()
 {
  su - postgres -c "$PG_CTL start -D /var/nnnadminexample/mydatabase"
  return $?
 }

 fn_stop()
 {
  su - postgres -c "$PG_CTL stop  -D /var/nnnadminexample/mydatabase"
  return $?
 }

.SS Lancement de la base de données seulement.
admin.sh database start

.SS Affiche l'état de tous les composants.
admin.sh -A allsys status

.SS Arrête les modules qui ne sont pas système.
admin.sh -A nosys stop

.SS Relance l'Apache
admin.sh apache restart

.SH AUTEUR
3Zen

.SH VOIR AUSSI
.BR backup.sh(1),
.BR check.sh(1),
.BR launch.sh(1)
